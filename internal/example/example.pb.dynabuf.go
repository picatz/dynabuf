// Code generated by protoc-gen-go-dynabuf. DO NOT EDIT.

package example

import (
	context "context"
	aws "github.com/aws/aws-sdk-go-v2/aws"
	expression "github.com/aws/aws-sdk-go-v2/feature/dynamodb/expression"
	dynamodb "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	types "github.com/aws/aws-sdk-go-v2/service/dynamodb/types"
)

// TableName_storage is the name of the storage table in DynamoDB.
var TableName_storage = aws.String("storage")

// CreateTable_storage creates the storage table in DynamoDB. If there are any issues
// creating the table, an error will be returned.
func CreateTable_storage(ctx context.Context, dynamoClient *dynamodb.Client) error {
	_, err := dynamoClient.CreateTable(
		ctx,
		&dynamodb.CreateTableInput{
			TableName: TableName_storage,
			AttributeDefinitions: []types.AttributeDefinition{
				{
					AttributeName: aws.String("room"),
					AttributeType: types.ScalarAttributeTypeS,
				},
				{
					AttributeName: aws.String("drawer"),
					AttributeType: types.ScalarAttributeTypeS,
				},
			},
			KeySchema: []types.KeySchemaElement{
				{
					AttributeName: aws.String("room"),
					KeyType:       types.KeyTypeHash,
				},
				{
					AttributeName: aws.String("drawer"),
					KeyType:       types.KeyTypeRange,
				},
			},
			BillingMode: types.BillingModePayPerRequest,
		},
	)
	return err
}

// PrimaryKey returns the primary key to use with DynamoDB.
//
// This is either a single attribute (a partition key) or a composite key
// (a partition key and a sort key). The primary key is used to uniquely
// identify an item in a table.
func (m *Example) PrimaryKey() map[string]types.AttributeValue {
	return map[string]types.AttributeValue{
		"room":   &types.AttributeValueMemberS{Value: m.Room},
		"drawer": &types.AttributeValueMemberS{Value: m.Drawer},
	}
}

// KeyCondition returns the key condition to use with DynamoDB expressions.
//
// This is either a single attribute (a partition key) or a composite key
// (a partition key and a sort key). The key condition is used to query
// items in a table.
func (m *Example) KeyCondition() expression.KeyConditionBuilder {
	return expression.Key("room").Equal(expression.Value(m.Room)).And(expression.Key("drawer").Equal(expression.Value(m.Drawer)))
}
